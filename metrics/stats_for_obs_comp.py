''' 
Calculate the climo average over the 1981-2014 period, then take ensemble statistics.
Data will be compared to observations datasets, which have a common period of 1981 to 2014.
'''

import xarray as xr
import glob
import subprocess
import sys
import os
import datetime
from filepaths import fwipaths
import gc
tracking_id = subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode('ascii').strip()

version = f'CanLEAD-FWI-{sys.argv[1]}-v1'
if sys.argv[1] == 'S14FD': nfls = 10
elif sys.argv[1] == 'EWEMBI': nfls = 50

test_statistics = ['annual_quantile',
                   #'QS-DEC_mean', 
                   #'MJJAS_mean'
                   ]

outpath = f'{fwipaths.output_data}{version}/summary_stats/1981_2014_ensemble_percentiles/'
if not os.path.exists(outpath):
    os.makedirs(outpath)

def add_attrs(ds):
    ds.attrs['history'] = f'Generated by {sys.argv[0]}'
    ds.attrs['git_id'] = tracking_id
    ds.attrs['git_repo'] = 'https://github.com/ECCC-CCCS/CanLEAD-FWI-v1/'
    ds.attrs['creation_date'] = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
    return ds 

for test_stat in test_statistics: 
            
    afls = glob.glob(f'{fwipaths.output_data}{version}/summary_stats/RCP85/{test_stat}/*_{test_stat}.nc')
    assert len(afls) == nfls, f'Number of files does not equal {nfls}: {len(afls)}'
    annual_alldat = xr.open_mfdataset(afls).chunk({'realization':-1})
    
    test_period = annual_alldat.sel(time=slice('1981','2014')).mean(dim='time')
    
    if 'quantile' in test_period.coords:
        test_period = test_period.rename({'quantile': 'annual_quantiles'})
        
    test_period_ens_perc = xr.merge([test_period.quantile([0.10,0.50,0.90], dim='realization', keep_attrs=True).rename({'quantile':'ensemble_statistic'}),
                                     test_period.mean(dim='realization', keep_attrs=True).assign_coords({'ensemble_statistic': 'mean'}).expand_dims('ensemble_statistic')])
    test_period_ens_perc['ensemble_statistic'] = [f'quantile:{q}' for q in test_period_ens_perc.ensemble_statistic.values[:3]] + ['mean']                     
        
    encoding = {var: {'dtype': 'float32', 'zlib': True, 'complevel': 4} for var in test_period_ens_perc.data_vars} #
        
    test_period_ens_perc = add_attrs(test_period_ens_perc)
              
    test_period_ens_perc.to_netcdf(f'{outpath}/{test_stat}_1981_2014_mean_ensemble_percentiles.nc', encoding=encoding)
    
    del([afls,annual_alldat,test_period,test_period_ens_perc])
    gc.collect()
