'''
Calculate the standard deviation across the reference period climatologies for each metric. 
This will be used to calculate the robustness of projected changes in a signal-to-noise ratio approach.
'''

import xarray as xr
import glob
import subprocess
import sys
import datetime
from filepaths import fwipaths
import gc
tracking_id = subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode('ascii').strip()

version = f'CanLEAD-FWI-{sys.argv[1]}-v1'

test_statistics = ['MJJAS_mean_fillna',
                   'MJJAS_quantile_fillna',
                   'fire_season_length',
                   'exceedances_high',
                   'exceedances_very_high',
                   'exceedances_extreme',
                   'exceedances_1971_2000_MJJASp95_fillna']

# all RCPs are the same in historical period (due to GWL translation), so only need to calculated for RCP85
rcp = 'RCP85'

outpath = f'{fwipaths.output_data}{version}/summary_stats/intraensemble_std_1971_2000/'
    
# Canada mask, excluding high Arctic
final_mask = xr.open_dataset(f'{fwipaths.input_data}/CanLEAD_FWI_final_mask.nc')['CanLEAD_FWI_mask'] 
    
# function to add tracking attributes to output file
def add_attrs(ds):
    ds.attrs['history'] = f'Generated by {sys.argv[0]}'
    ds.attrs['git_id'] = tracking_id
    ds.attrs['git_repo'] = 'https://github.com/ECCC-CCCS/CanLEAD-FWI-v1/'
    ds.attrs['creation_date'] = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
    return ds 

# Calculate the intraensemble standard deviation across the reference period climatologies. 
# This will be used to calculate robustness of projected changes
for test_stat in test_statistics: 
                                                      
    # open RCP8.5 data for historical period
    
    cfls = glob.glob(f'{fwipaths.output_data}{version}/summary_stats/{rcp}/{test_stat}/*_{test_stat}*_30yr_mean.nc') 
    assert len(cfls) == 50, f'Number of files does not equal 50: {len(cfls)}'
    
    # open all 50 files together
    alldat = xr.open_mfdataset(cfls, chunks={'realization':-1, 'lat':5, 'lon':5},
                               decode_timedelta=False).chunk({'realization':-1}) # chunk=-1 will create only one chunk, to allow stats
    
    ref_period = alldat.sel(period='1971-2000').squeeze() # select historical period. this is the 30 year average
    
    # for MJJAS quantile metric, rename quantile dims if they exist
    if 'quantile' in ref_period.coords: 
        ref_period = ref_period.rename({'quantile': 'annual_quantiles'}) 
                
    # take the standard deviation across the reference period climatologies
    std = ref_period.std(dim='realization', keep_attrs=True, skipna=False) 
           
    # set encoding for file save
    encoding = {var: {'zlib': True, 'complevel': 4} for var in alldat.data_vars} 
    for var in ['lat','lon']:
        encoding[var] = {'dtype': 'float64', '_FillValue': None}  
        
    std = add_attrs(std) # add file tracking (git) attrs
    std.where(final_mask==100).to_netcdf(f'{outpath}{test_stat}_ensemble_std_1971_2000.nc', encoding=encoding) # save
        
    del([cfls,alldat,std])
    gc.collect()
