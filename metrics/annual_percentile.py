"""
Take 95th percentile of FWI System components, annually. NaN are skipped.
"""
# Set up code 
import xarray as xr
import glob
import sys
import os
from config_stats import stats_chunks, add_realization_dim
from filepaths import fwipaths
import gc
import subprocess
tracking_id = subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode('ascii').strip()

version = f'CanLEAD-FWI-{sys.argv[1]}-v1' # S14FD or EWEMBI
outpath = f'{fwipaths.output_data}{version}/summary_stats/RCP85/annual_quantile/'
if not os.path.exists(outpath):
    os.makedirs(outpath)

ens_group = sys.argv[2] # ensemble set, from 1 to 5
# get filenames of daily data for 10 ensemble members in the specified set
fls = glob.glob(f'{fwipaths.output_data}/{version}/r{ens_group}_r*.nc')

# Canada mask, excluding northern Arctic
final_mask = xr.open_dataset(f'{fwipaths.input_data}/CanLEAD_FWI_final_mask.nc')['CanLEAD_FWI_mask'] 

# loop over files
for fl in fls: 
    
    # open data
    data = xr.open_dataset(fl, chunks=stats_chunks).chunk(dict(time=-1)) # time=-1 will create only one chunk along time dim
    data = data.drop_vars(['time_bnds', 'fire_season_mask']) # keep FWI System outputs only
        
    # take quantiles
    out = data.resample(time='AS').quantile([0.95, 0.99], keep_attrs=True) 
    
    # update attrs
    for var in out.data_vars:
        out[var].attrs['cell_methods'] = 'time: percentile over year (interval: 1 day)' # add cell_methods in format: time: method1 within years time: method2 over years
        del(out[var].attrs['ancillary_variables'])
    out.attrs['frequency'] = 'annual' # change attrs in outfile to reflect new frequency
    out.attrs['history'] = f'Generated by {sys.argv[0]}'
    out.attrs['git_id'] = tracking_id
    out.attrs['git_repo'] = 'https://github.com/ECCC-CCCS/CanLEAD-FWI-v1/' 
    
    # add realization as a dimension and realization attrs, via config func
    out, realization_label = add_realization_dim(out) # realization is taken from dataset attrs
    
    # set encoding
    encoding = {var: {'dtype': 'float32', 'zlib': True, 'complevel': 3, '_FillValue': 1e+20} for var in out.data_vars} 
    for var in ['lat','lon']: 
        encoding[var] = {'dtype': 'float64', '_FillValue': None}  # for lat and lon
               
    out = out.where(final_mask==100) # mask with Canadian boundaries and ecozone mask
                
    # save
    out.to_netcdf(f'{outpath}/{realization_label}_rcp85_{version}_annual_quantile.nc', encoding=encoding) 
           
    del([out,data,realization_label])
    gc.collect()

