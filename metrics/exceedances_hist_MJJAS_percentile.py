"""
Count exceedances of future FWI System component extremes (95th percentile MJJAS fillna), annually.
"""
# Set up code 
import xarray as xr
import glob
import sys
import os
from config_stats import stats_chunks, add_realization_dim
from filepaths import fwipaths
import gc
import subprocess  
tracking_id = subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode('ascii').strip()

version = f'CanLEAD-FWI-{sys.argv[1]}-v1'
outpath = f'{fwipaths.output_data}{version}/summary_stats/RCP85/exceedances_1971_2000_MJJASp95_fillna/'
if not os.path.exists(outpath):
    os.makedirs(outpath)

ens_group = sys.argv[2] # ensemble set, from 1 to 5
# get filenames of daily data for 10 ensemble members in the specified set
fls = glob.glob(f'{fwipaths.output_data}/{version}/r{ens_group}_r*.nc')

# Canada mask, excluding northern Arctic
final_mask = xr.open_dataset(f'{fwipaths.input_data}/CanLEAD_FWI_final_mask.nc')['CanLEAD_FWI_mask'] 

# loop over files
for fl in fls:  
    
    # open data
    data = xr.open_dataset(fl, chunks=stats_chunks) 
    data = data.drop_vars(['time_bnds', 'fire_season_mask']) # keep FWI System outputs only
    
    # get historical climo mean MJJAS 95th percentile for this realization
    realization_label = data.attrs['CanLEAD_CanRCM4_experiment_id'][-2:] + '_' + data.attrs['CanLEAD_CanRCM4_driving_model_ensemble_member'] # get realization ID from daily data attrs
    hist = xr.open_dataset(f'{fwipaths.output_data}{version}/summary_stats/RCP85/MJJAS_quantile_fillna/{realization_label}_rcp85_{version}_MJJAS_quantile_fillna_30yr_mean.nc') # open file
    hist = hist.sel(period='1971-2000',quantile=0.95).squeeze().drop('period') # select the historical period and 95th percentile for this realization
    
    out = xr.where(data >= hist, 1, 0) # if true, 1, if false 0. These will be added below to count days >= hist
    out.attrs = data.attrs # replace attrs
    out = out.resample(time='AS').sum(keep_attrs=True) # count exceedances by summing values of 1, which indicate values >= hist       
    
    # add realization as a dimension and realization attrs, via config func
    out, realization_label = add_realization_dim(out) 

    # update FWI System attrs + var names  
    for var in out.data_vars: 
        attrs = dict(short_name = data[var].attrs['short_name'] + '_days_greater_historical_MJJAS_q95',
                    long_name = data[var].attrs['long_name'] + ': Count of days that exceed the 95th percentile MJJAS fillna value in 1971-2000',
                    cell_methods = 'time: count within years', # in format: time: method1 within years time: method2 over years
                    description =  data[var].attrs['description']
                    ) # units are 'days', leave off until ensemble stats
        out[var].attrs = attrs # replace attrs with new attrs
    out.attrs['frequency'] = 'year' # change attrs in outfile to reflect new frequency
    
    # set encoding
    encoding = {var: {'dtype': 'int16', 'zlib': True, 'complevel': 3, '_FillValue': 32767} for var in out.data_vars} 
    for var in ['lat','lon']: 
        encoding[var] = {'dtype': 'float64', '_FillValue': None}  # for lat, lon and time

    # add  git id
    out.attrs['history'] = f'Generated by {sys.argv[0]}'
    out.attrs['git_id'] = tracking_id
    out.attrs['git_repo'] = 'https://github.com/ECCC-CCCS/CanLEAD-FWI-v1/' 
          
    out = out.where(final_mask==100) # mask with Canadian boundaries and ecozone mask
           
    # save
    out.to_netcdf(f'{outpath}/{realization_label}_rcp85_{version}_exceedances_1971_2000_MJJASp95_fillna.nc', encoding=encoding) 
    
    del([out,data,realization_label])
    gc.collect()