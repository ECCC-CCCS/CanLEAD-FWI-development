"""
Count exceedances of future FWI System component moderate, high, and extreme fire weather conditions, annually. 
NOTE: These are incorrectly labelled in this script, and should likely be called 'high', 'very high', and 'extreme' conditions.
"""
#%% Set up code 

import xarray as xr
import glob
import sys
import os
from config_stats import stats_chunks, add_realization_dim
from filepaths import fwipaths
import gc
import subprocess  
tracking_id = subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode('ascii').strip()

version = f'CanLEAD-FWI-{sys.argv[1]}-v1' # EWEMBI or S14FD variant

level = sys.argv[3] # 'moderate', 'high' or 'extreme'

outpath = f'{fwipaths.output_data}{version}/summary_stats/RCP85/exceedances_{level}/'
if not os.path.exists(outpath):
    os.makedirs(outpath)

ens_group = sys.argv[2] # ensemble set, a value of 1 to 5
fls = glob.glob(f'{fwipaths.output_data}/{version}/r{ens_group}_*.nc') # get filenames of daily data for 10 ensemble members in the specified set

#%% Count the number of values which exceed a set exceedance threshold, annually, by component

# These are from national FWI System standard ratings, e.g.: https://cwfis.cfs.nrcan.gc.ca/ha/fwnormals?type=dsr&month=7
dexceedance = { 'moderate': {'FFMC': 84,
                            'DMC': 27, 
                            'DC':  190,
                            'ISI': 5,
                            'BUI': 40,
                            'FWI': 10,
                            'DSR': 3},
                'high': {'FFMC': 88,
                         'DMC': 40, 
                         'DC':  300,
                         'ISI': 10,
                         'BUI': 60,
                         'FWI': 20,
                         'DSR': 5},
                'extreme': {'FFMC': 91,
                            'DMC': 60, 
                            'DC':  425,
                            'ISI': 15,
                            'BUI': 90,
                            'FWI': 30,
                            'DSR': 15} }

for fl in fls: 
   
    exceedances = dexceedance[level] # set which exceedances (moderate, high or extreme)

    # open data
    data = xr.open_dataset(fl, chunks=stats_chunks) 
    data = data.drop_vars(['time_bnds', 'fire_season_mask']) # keep FWI System outputs only

    # create lat-lon grid of the static exceedances for each var
    to_exceed = data.isel(time=1).drop('time').squeeze() # get a grid of identical lat-lon from dataset
    for var in data.data_vars: # re-assign values for each component using "exceedances" defined above
        to_exceed[var] = exceedances[var] 
            
    out = xr.where(data >= to_exceed, 1, 0) # if true, 1, if false 0
    out.attrs = data.attrs # copy over attrs from input dataset lost in xr.where
    out = out.resample(time='AS').sum(keep_attrs=True) # take annual sum of counts where data >= to_exceed
    
    # add realization as a dimension and realization attrs, via config func
    out, realization_label = add_realization_dim(out) # realization taken from dataset attrs

    # update FWI System component attrs + var names
    for var in out.data_vars: 
        # set new attributes
        attrs = dict(short_name = data[var].attrs['short_name'] + f'_days_greater_{level}_fire_danger',
                     long_name = data[var].attrs['long_name'] + f': Count of days that exceed the {level} fire danger threshold of {exceedances[var]}',
                     cell_methods = 'time: count within years', # in format: time: method1 within years time: method2 over years
                     exceedance_threshold = exceedances[var],
                     description = data[var].attrs['description']
                     #units = 'days' # auto-converts into a timedelta in future scripts, leave off for now
                     )
        out[var].attrs = attrs # replace attrs with new attrs
    out.attrs['frequency'] = 'year' # change attrs in outfile to reflect new frequency

    # set encoding
    encoding = {var: {'dtype': 'int16', 'zlib': True, 'complevel': 3, '_FillValue': 32767} for var in out.data_vars} 
    for var in ['lat','lon']: 
        encoding[var] = {'dtype': 'float64', '_FillValue': None}  # for lat and lon

    # add  git id
    out.attrs['history'] = f'Generated by {sys.argv[0]}'
    out.attrs['git_id'] = tracking_id
    out.attrs['git_repo'] = 'https://github.com/ECCC-CCCS/CanLEAD-FWI-v1/' 
           
    # save
    out.to_netcdf(f'{outpath}/{realization_label}_{version}_annual_exceedances_{level}.nc', encoding=encoding) 
        
    to_exceed.isel(lat=1,lon=1).squeeze().to_netcdf(f'{outpath}/annual_exceedances_thresholds_{level}.nc') # save exceedance thresholds file, for records
        
    del([out,data,realization_label,to_exceed])
    gc.collect()     