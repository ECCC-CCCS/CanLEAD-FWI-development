'''
Calculate robustness and save as a boolean mask which indicate if 
the change is robust (True) or non-robust (False), by period.
'''
import xarray as xr
import subprocess
import datetime
import sys
import os
import datetime
from filepaths import fwipaths
from tqdm import tqdm
tracking_id = subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode('ascii').strip()

version = f'CanLEAD-FWI-{sys.argv[1]}-v1'

test_statistics = ['MJJAS_mean_fillna',
                   'MJJAS_quantile_fillna',
                   'fire_season_length',
                   'exceedances_high',
                   'exceedances_very_high',
                   'exceedances_extreme',
                   'exceedances_1971_2000_MJJASp95_fillna']

inpath = f'{fwipaths.output_data}{version}/summary_stats/'
final_mask = xr.open_dataset(f'{fwipaths.input_data}/CanLEAD_FWI_final_mask.nc')['CanLEAD_FWI_mask'] 

# function to add tracking attributes and description to output file
def add_attrs(ds):
    ds.attrs['history'] = f'Generated by {sys.argv[0]}'
    ds.attrs['creation_date'] = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
    ds.attrs['git_id'] = tracking_id
    ds.attrs['git_repo'] = 'https://github.com/ECCC-CCCS/CanLEAD-FWI-v1/'
    robustness.attrs['description'] = 'Boolean mask of whether the CanLEAD-FWI ensemble mean projected change is robust'\
                                      +' (signal to noise ratio greater than 1) for the FWI System component and' \
                                      +'  time period specified by the coordinates.' 
    robustness.attrs['values'] = "True (robust), False (non-robust)"
    return ds 

# calculate the robustness of future change using a signal to noise ratio approach. Robust changes when |SNR| > 1
for test_stat in tqdm(test_statistics):
                       
    for rcp in ['RCP85','constructed_RCP26', 'constructed_RCP45']:
  
        # create output folder
        outpath = f'{fwipaths.output_data}{version}/summary_stats/{rcp}/ensemble_percentiles/robustness/'
        if not os.path.exists(outpath):
            os.makedirs(outpath)
        
        # open ensemble mean change over time, by period       
        alldat = xr.open_dataset(f'{inpath}{rcp}/ensemble_percentiles/{test_stat}_{rcp}_30yr_mean_delta_1971_2000_ensemble_percentiles.nc',
                                 decode_timedelta=False).sel(ensemble_statistic='mean')
        # open intraensemble standard deviation in the reference period
        std = xr.open_dataset(f'{inpath}intraensemble_std_1971_2000/{test_stat}_ensemble_std_1971_2000.nc', decode_timedelta=False)
        
        # calculate the robustness of future change using a signal to noise ratio approach. Robust change = True when |SNR| > 1
        robustness = xr.where(abs(alldat) > std, True, False)  
        
        # add attrs, mask to study domain, and save
        add_attrs(robustness).where(final_mask==100).to_netcdf(f'{outpath}{test_stat}_{rcp}_30yr_mean_robustness.nc')
          
          
          
  
